{"version":3,"sources":["components/PhotoInfo/PhotoInfo.module.css","container/PhotoList/PhotoList.module.css","container/Modal/Modal.js","components/PhotoInfo/PhotoInfo.js","container/PhotoList/PhotoList.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Modal","props","el","document","createElement","body","appendChild","this","removeChild","ReactDOM","createPortal","children","React","Component","PhotoInfo","useState","name","setName","comment","setComment","isOpen","className","classes","modal__overlay","modal__window","modal__inner","modal__photoinfo","modal__photo","alt","src","photo","url","modal__comments","comments","length","map","comment__date","date","Date","toLocaleString","split","comment__text","text","onSubmit","e","console","log","target","preventDefault","addComment","modal__form","modal__input","type","placeholder","value","onChange","disabled","modal__btn","onClick","onClose","close","PhotoList","state","photos","getDate","openModal","id","undefined","fetchPhoto","setState","handleSubmit","push","parse","postComment","handleCancel","fetch","response","json","data","method","JSON","stringify","headers","error","photolist","photolist__inner","App","Boolean","window","location","hostname","match","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.5a93ebc8.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"modal__overlay\":\"PhotoInfo_modal__overlay__3lSb1\",\"modal__window\":\"PhotoInfo_modal__window__2PY1g\",\"modal__inner\":\"PhotoInfo_modal__inner__2PkEl\",\"modal__photo\":\"PhotoInfo_modal__photo__1gYLI\",\"modal__form\":\"PhotoInfo_modal__form__27Tqk\",\"modal__input\":\"PhotoInfo_modal__input__nOfJ_\",\"modal__photoinfo\":\"PhotoInfo_modal__photoinfo__3Uaap\",\"modal__btn\":\"PhotoInfo_modal__btn__CyWPI\",\"modal__comments\":\"PhotoInfo_modal__comments__2hjwg\",\"comment\":\"PhotoInfo_comment__2vI2Z\",\"comment__date\":\"PhotoInfo_comment__date__GT5LM\",\"comment__text\":\"PhotoInfo_comment__text__2RPaH\",\"close\":\"PhotoInfo_close__pMdQJ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"photo\":\"PhotoList_photo__53IMk\",\"photolist\":\"PhotoList_photolist__ckOoz\",\"photolist__inner\":\"PhotoList_photolist__inner__zsxxY\"};","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\n\r\n\r\nexport default class Modal extends React.Component {\r\n    constructor(props) {\r\n      super(props);\r\n      this.el = document.createElement('div');\r\n    }\r\n  \r\n    componentDidMount() {\r\n      // Элемент портала добавляется в DOM-дерево после того, как\r\n      // потомки компонента Modal будут смонтированы, это значит,\r\n      // что потомки будут монтироваться на неприсоединённом DOM-узле.\r\n      // Если дочерний компонент должен быть присоединён к DOM-дереву\r\n      // сразу при подключении, например, для замеров DOM-узла,\r\n      // или вызова в потомке 'autoFocus', добавьте в компонент Modal\r\n      // состояние и рендерите потомков только тогда, когда\r\n      // компонент Modal уже вставлен в DOM-дерево.\r\n      document.body.appendChild(this.el);\r\n    }\r\n  \r\n    componentWillUnmount() {\r\n        document.body.removeChild(this.el);\r\n    }\r\n  \r\n    render() {\r\n      return ReactDOM.createPortal(\r\n        this.props.children,\r\n        this.el\r\n      );\r\n    }\r\n  }\r\n  ","import React, { useState } from 'react'\r\nimport Modal from '../../container/Modal/Modal'\r\nimport classes from'./PhotoInfo.module.css'\r\n\r\n\r\nconst PhotoInfo =(props) => {\r\n    const [name,setName]=useState('')\r\n    const [comment,setComment]=useState('')\r\n  \r\n    function getComments() {\r\n        return props.photo.comments.map(comment => {\r\n            return (\r\n                <div className={classes.comment}>\r\n                    <p className={classes.comment__date}>{getTime(comment.date)}</p>\r\n                    <p className={classes.comment__text}>{comment.text}</p>\r\n                </div>\r\n            )\r\n        })\r\n    }\r\n \r\n    function getTime(date) {\r\n         const getDate = new Date(date).toLocaleString()\r\n         return getDate.split(',')[0]\r\n     }\r\n\r\n\r\n     function addComment(e) {\r\n         console.log(e.target);\r\n         \r\n         e.preventDefault();\r\n         props.addComment(name,comment)\r\n         setName('')\r\n         setComment('')\r\n         \r\n     }\r\n\r\n     function isValid() {\r\n         console.log(name);\r\n         console.log(comment);\r\n         \r\n         console.log(name.length!==0 && comment.length!==0);\r\n         \r\n         return name.length!==0 && comment.length!==0\r\n     }\r\n\r\n    return (\r\n        <>{props.isOpen && \r\n\r\n            <Modal>\r\n                \r\n                    <div className={classes.modal__overlay}>\r\n                        <div className={classes.modal__window}>\r\n                            <div className={classes.modal__inner}>\r\n                                <div className={classes.modal__photoinfo}>                               \r\n                                    <img className={classes.modal__photo} alt=\"1\" src={props.photo.url}/>  \r\n                                    <div className={classes.modal__comments}>\r\n                                    {(props.photo.comments.length!==0)\r\n                                    ?\r\n                                    getComments()\r\n                                    :\r\n                                    <div className={classes.comment}>\r\n                                    <p className={classes.comment__text}>Комментариев пока нет</p>\r\n                                    </div>}\r\n                                </div>\r\n                                </div>\r\n                                <form onSubmit={addComment} className={classes.modal__form}>\r\n                                    <input\r\n                                        className={classes.modal__input} \r\n                                        type=\"text\"  \r\n                                        placeholder=\"Ваше имя\"\r\n                                        value={name}\r\n                                        onChange={(e)=>setName(e.target.value)}\r\n                                    />\r\n                                    <input \r\n                                        className={classes.modal__input} \r\n                                        type=\"text\"\r\n                                        placeholder=\"Ваш комментарий\"\r\n                                        value={comment}\r\n                                        onChange={(e)=>setComment(e.target.value)}\r\n                                    />\r\n                                    <input  disabled={!isValid()} className={classes.modal__btn} type=\"submit\" value='Оставить комментарий'/>\r\n                                </form>       \r\n                          \r\n                                \r\n                                \r\n                                \r\n                               \r\n                            </div>\r\n                            <button  onClick={props.onClose} className={classes.close}>\r\n                            </button>\r\n                         \r\n                           \r\n                                \r\n                           </div>\r\n\r\n                            \r\n                    </div>\r\n                    \r\n                \r\n            </Modal>\r\n        }\r\n       \r\n        </>\r\n    )\r\n}\r\n\r\nexport default PhotoInfo","import React, {Component} from 'react'\r\nimport classes from './PhotoList.module.css'\r\nimport PhotoInfo from '../../components/PhotoInfo/PhotoInfo'\r\n\r\n\r\nexport default class PhotoList extends Component {\r\n    state={\r\n        photos:[],\r\n        photo:null,\r\n        isOpen:false\r\n    }\r\n    async componentDidMount() {\r\n        const response= await fetch('https://boiling-refuge-66454.herokuapp.com/images')\r\n        const data = await response.json()\r\n        this.setState({\r\n            photos:data\r\n        })\r\n    }\r\n\r\n    async postComment(data) {\r\n        console.log(this.state.photo.comments);\r\n        try {\r\n         await fetch(`https://boiling-refuge-66454.herokuapp.com/images/${this.state.photo.id}/comments`, {\r\n            method: 'POST', // или 'PUT'\r\n            body: JSON.stringify(data), // данные могут быть 'строкой' или {объектом}!\r\n            headers: {\r\n              'Content-Type': 'application/json'\r\n            }\r\n          })\r\n          \r\n        }\r\n        catch(error) {console.error('Ошибка:', error);}\r\n    }\r\n\r\n    async fetchPhoto(id) {\r\n        const response = await fetch('https://boiling-refuge-66454.herokuapp.com/images/'+id)\r\n        const photo = await  response.json()\r\n        console.log(photo);\r\n        \r\n        this.setState({\r\n            photo\r\n        })\r\n    }\r\n\r\n    getDate = () => {\r\n        const date = new Date().toLocaleString()\r\n        return date.split(',')[0]\r\n    }\r\n\r\n    openModal = (e) => {\r\n        \r\n        const id=+e.target.id\r\n        console.log(e.target.id)\r\n        if (id!==undefined)\r\n        {\r\n            this.fetchPhoto(id)\r\n           \r\n            this.setState({\r\n                isOpen:true\r\n            })\r\n        }\r\n        \r\n\r\n     \r\n       \r\n       \r\n       \r\n        \r\n    }\r\n    \r\n      handleSubmit = (name,comment) => {\r\n          const photo=this.state.photo\r\n          photo.comments.push({\r\n              'id':new Date().toLocaleString(),\r\n              'text':comment,\r\n              'date':Date.parse(new Date())\r\n          })\r\n         \r\n          this.postComment({'name':name,'comment':comment})\r\n          this.setState({\r\n            photo\r\n        })\r\n          \r\n          \r\n        console.log('Submit function!');\r\n        \r\n      }\r\n    \r\n      handleCancel = () => {\r\n        console.log('Cancel function!');\r\n        this.setState({ \r\n            isOpen: false,\r\n            photo:null\r\n        });\r\n      }\r\n    render() {\r\n       \r\n        return(\r\n            <>\r\n            <section className={classes.photolist}>\r\n                <div className={classes.photolist__inner}>\r\n                    {this.state.photos.map(photo => {\r\n                        return (<img id={photo.id} onClick={e=>this.openModal(e)} className={classes.photo} alt=\"photo1\" src={photo.url}/>)\r\n                    })}\r\n                </div>\r\n            </section>\r\n            {this.state.photo?<PhotoInfo isOpen={this.state.isOpen}\r\n                        photo={this.state.photo}\r\n                        onClose={this.handleCancel}\r\n                        addComment={this.handleSubmit}\r\n            />:null}\r\n            </>\r\n        )\r\n    }\r\n}","import React from 'react';\nimport './App.css';\nimport PhotoList from './container/PhotoList/PhotoList'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header><h1 className=\"title\">TEST APP</h1></header>\n      <PhotoList/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}